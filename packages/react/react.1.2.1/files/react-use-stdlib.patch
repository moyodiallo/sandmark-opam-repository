From 9e58ec19694ded0bc0d7748ee524b9ab8f2cde59 Mon Sep 17 00:00:00 2001
From: Shakthi Kannan <author@shakthimaan.com>
Date: Mon, 24 Jan 2022 19:11:38 +0530
Subject: [PATCH] Use Stdlib instead of deprecated Pervasives

---
 src/react.ml  | 4 ++--
 src/react.mli | 8 +++-----
 2 files changed, 5 insertions(+), 7 deletions(-)

diff --git a/src/react.ml b/src/react.ml
index 1fde62e..0682f72 100644
--- a/src/react.ml
+++ b/src/react.ml
@@ -898,7 +898,7 @@ module E = struct
       add_dep m5 m'.enode;
       event m' p u
 
-  (* Pervasives support *)
+  (* Stdlib support *)
 
   module Option = struct
     let some e = map (fun v -> Some v) e
@@ -1434,7 +1434,7 @@ module S = struct
         let rec p () = [ m.enode ]
         and u c = match !(m.ev) with
         | None -> ()
-        | Some _ -> supdate (Pervasives.not (sval m')) m' c
+        | Some _ -> supdate (Stdlib.not (sval m')) m' c
         in
         E.add_dep m m'.snode;
         signal ~i:b m' p u
diff --git a/src/react.mli b/src/react.mli
index f86e1bf..7024d42 100644
--- a/src/react.mli
+++ b/src/react.mli
@@ -258,7 +258,7 @@ module E : sig
   val l6 : ('a -> 'b -> 'c -> 'd -> 'e -> 'f -> 'g) -> 'a event -> 'b event ->
     'c event -> 'd event -> 'e event -> 'f event -> 'g event
 
-  (** {1 Pervasives support} *)
+  (** {1 Stdlib support} *)
 
   (** Events with option occurences. *)
   module Option : sig
@@ -520,7 +520,7 @@ module S : sig
     ('a signal -> 'b signal -> 'c signal -> 'd signal -> 'e signal ->
       'f signal -> 'g signal)
 
-  (** The following modules lift some of [Pervasives] functions and
+  (** The following modules lift some of [Stdlib] functions and
       operators. *)
 
   module Bool : sig
@@ -951,7 +951,7 @@ let () = Gc.full_major (); List.iter set_x [2; 2; 3]]}
 let fl x y = S.app (S.app ~eq:(==) (S.const f) x) y (* inefficient *)
 let fl' x y = S.l2 f x y                            (* efficient *)
 ]}
-    Besides, some of [Pervasives]'s functions and operators are
+    Besides, some of [Stdlib]'s functions and operators are
     already lifted and availables in submodules of {!S}. They can be
     be opened in specific scopes. For example if you are dealing with
     float signals you can open {!S.Float}.
@@ -959,8 +959,6 @@ let fl' x y = S.l2 f x y                            (* efficient *)
 open React.S.Float
 
 let f t = sqrt t *. sin t (* f is defined on float signals *)
-...
-open Pervasives (* back to pervasives floats *)
 ]}
    If you are using OCaml 3.12 or later you can also use the [let open]
    construct
-- 
2.34.1

